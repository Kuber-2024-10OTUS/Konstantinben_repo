apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuber-hw-02-deployment
  namespace: homework
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      # https://kubernetes.io/ru/docs/concepts/scheduling-eviction/assign-pod-node/
      # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: homework
                    operator: In
                    values:
                      - "true"
      volumes:
        - name: kuber-hw-02-volume
          emptyDir: {}
      initContainers:
        - name: init-container
          image: busybox:latest
          command: ['sh', '-c', 'wget -O /init/index.html https://example.com']
          volumeMounts:
            - mountPath: /init
              name: kuber-hw-02-volume
      containers:
        - name: nginx
          image: nginx
          volumeMounts:
            - mountPath: /homework
              name: kuber-hw-02-volume
          ports:
            - containerPort: 80
          # проверяем, что nginx доступен
          livenessProbe:
            httpGet:
              path: /index.html
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          # проверяем, что файл на месте
          readinessProbe:
            exec:
              command:
                - cat
                - /homework/index.html
            initialDelaySeconds: 5
            periodSeconds: 10
          lifecycle:
            preStop:
              exec:
                command: ['sh', '-c', 'rm -f /homework/index.html']
      restartPolicy: Always

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1

